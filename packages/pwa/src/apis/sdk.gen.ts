// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, TDataShape, Client } from './client';
import type { CategoryControllerFindAllData, CategoryControllerFindAllResponses, TransactionControllerFindAllData, TransactionControllerFindAllResponses, TransactionControllerCreateData, TransactionControllerCreateResponses, TransactionControllerRemoveData, TransactionControllerRemoveResponses, TransactionControllerFindOneData, TransactionControllerFindOneResponses, TransactionControllerUpdateData, TransactionControllerUpdateResponses } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

/**
 * 获取所有分类
 */
export const categoryControllerFindAll = <ThrowOnError extends boolean = false>(options?: Options<CategoryControllerFindAllData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<CategoryControllerFindAllResponses, unknown, ThrowOnError>({
        url: '/api/category',
        ...options
    });
};

export const transactionControllerFindAll = <ThrowOnError extends boolean = false>(options: Options<TransactionControllerFindAllData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<TransactionControllerFindAllResponses, unknown, ThrowOnError>({
        url: '/api/transaction',
        ...options
    });
};

export const transactionControllerCreate = <ThrowOnError extends boolean = false>(options: Options<TransactionControllerCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<TransactionControllerCreateResponses, unknown, ThrowOnError>({
        url: '/api/transaction',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const transactionControllerRemove = <ThrowOnError extends boolean = false>(options: Options<TransactionControllerRemoveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<TransactionControllerRemoveResponses, unknown, ThrowOnError>({
        url: '/api/transaction/{id}',
        ...options
    });
};

export const transactionControllerFindOne = <ThrowOnError extends boolean = false>(options: Options<TransactionControllerFindOneData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<TransactionControllerFindOneResponses, unknown, ThrowOnError>({
        url: '/api/transaction/{id}',
        ...options
    });
};

export const transactionControllerUpdate = <ThrowOnError extends boolean = false>(options: Options<TransactionControllerUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<TransactionControllerUpdateResponses, unknown, ThrowOnError>({
        url: '/api/transaction/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};